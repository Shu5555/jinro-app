役職抽選機能に関する技術仕様

## 1. 概要

本機能は、人狼ゲームのGM（ゲームマスター）が参加者リストと各陣営の人数を設定し、ランダムに役職を割り当てるためのものである。割り当て結果は、各プレイヤーが個別に確認するための合言葉と共有URL、およびGMが全体を把握するための確認リストとして出力される。

## 2. 関連ファイル

- `index.html`: GMが操作を行うメインのUI。参加者リストの入力、各陣営の人数設定、抽選開始のトリガー（ボタン）が含まれる。
- `script.js`: 役職抽選のコアロジックを担うJavaScriptファイル。DOM操作、イベントリスナー、データ処理、API連携など、機能の大部分が記述されている。
- `roles.csv`: 割り当てに使用される役職のデータソース。`役職名,陣営,能力,勝利条件,制作者`のヘッダーを持つCSV形式。アプリ起動時に自動で読み込まれるか、ユーザーが手動で指定する。
- `config.js`: アプリケーション全体の設定ファイル。データ保存に使用する `JSONBin.io` のAPIキーなどが含まれる。

## 3. 処理フロー

1.  **データ読み込み**:
    -   `script.js`内の`DOMContentLoaded`イベント内で、`loadDefaultCsv`関数が実行される。
    -   `fetch('./roles.csv')`により、デフォルトの役職リストが非同期で読み込まれる。
    -   読み込まれたCSVテキストは`parseCSV`関数によって解析され、役職オブジェクトの配列`rolesData`としてグローバル変数に格納される。
    -   ユーザーは`index.html`の`<input type="file">`から手動で別のCSVファイルを読み込ませることも可能。

2.  **ユーザー操作**:
    -   GMが`index.html`の`<textarea id="participants">`に参加者名を改行区切りで入力する。
    -   各陣営（村人、人狼、第三陣営）の人数を`<input type="number">`で指定する。
    -   「役職抽選へ」ボタン (`<button id="generate-button">`) をクリックする。

3.  **抽選処理の開始**:
    -   `generateButton`に登録されたクリックイベントリスナーが発火する。
    -   参加者数と設定された役職の合計数が一致するかどうかを検証する。

4.  **コアロジック (`assignRoles`関数)**:
    -   この関数が、参加者リスト、全役職データ(`rolesData`)、および各陣営の人数を引数として呼び出される。
    -   **陣営ごとの役職選定**:
        -   `getRolesByTeam`ヘルパー関数が陣営名（例: '村人陣営'）と必要人数で呼び出される。
        -   `rolesData`から該当する陣営の役職だけを`filter`で抽出する。
        -   抽出された役職リストの数が、要求された人数より少ない場合はエラーを投げる。
        -   `sort(() => 0.5 - Math.random())`を用いてリストをシャッフルし、`slice(0, count)`で必要人数分の役職をランダムに選択する。
    -   **割り当てリストの生成**:
        -   各陣営について上記処理を行い、選択された役職をすべて結合して、このゲームで使用する役職のプール（`availableRoles`）を作成する。
        -   参加者リストも同様に`sort(() => 0.5 - Math.random())`でシャッフルされる。
        -   シャッフルされた参加者リストを`map`でループ処理し、各参加者に対して`availableRoles`から役職を順に割り当てる。
        -   同時に、あらかじめ定義された日本語の単語リスト（`passwords`）から、ユニークな「合言葉」も割り当てる。
    -   最終的に、各参加者の名前、役職情報（役職名、陣営、能力など）、合言葉を含むオブジェクトの配列が生成され、返却される。

5.  **結果の出力と保存**:
    -   `assignRoles`から返された割り当て結果オブジェクトを`simpleEncrypt`関数で暗号化する。
    -   `JSONBin.io`が有効な場合、暗号化されたデータを`JSONBinStorage`クラス経由でサーバーに保存し、ユニークなID（`binId`）を取得する。
    -   取得した`binId`を埋め込んだプレイヤー確認用URL (`player.html?bin=...`) と、各プレイヤーの合言葉を画面 (`<textarea id="combined-output">`) に表示する。
    -   GMが確認するための、割り当て結果の詳細一覧も`generateGMDetailedList`関数によって画面に描画される。
    -   現在のゲーム状態（参加者、人数設定、割り当て結果など）は、`sessionStorage`に保存され、ページをリロードしても状態が復元される。

## 4. データ構造（`assignRoles`関数の返り値の例）

```json
[
  {
    "name": "プレイヤーA",
    "role": "人狼",
    "team": "人狼陣営",
    "ability": "毎晩、村人ひとりを襲撃して殺害できる。",
    "winCondition": "人狼陣営以外を全員殺害すること。",
    "author": "デフォルト",
    "fortuneResult": "人狼",
    "password": "寿司"
  },
  {
    "name": "プレイヤーB",
    "role": "市民",
    "team": "村人陣営",
    "ability": "特別な能力はない。",
    "winCondition": "人狼陣営を殺害すること。",
    "author": "デフォルト",
    "fortuneResult": "人狼ではない",
    "password": "ラーメン"
  }
]
```
